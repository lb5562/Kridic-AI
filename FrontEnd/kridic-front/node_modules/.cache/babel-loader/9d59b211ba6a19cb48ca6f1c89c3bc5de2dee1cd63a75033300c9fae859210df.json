{"ast":null,"code":"import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { v4 as uuidv4, validate as isUuid } from \"uuid\";\nimport { isRunnableInterface } from \"./utils.js\";\nconst MAX_DATA_DISPLAY_NAME_LENGTH = 42;\nexport function nodeDataStr(node) {\n  if (!isUuid(node.id)) {\n    return node.id;\n  } else if (isRunnableInterface(node.data)) {\n    try {\n      let data = node.data.toString();\n      if (data.startsWith(\"<\") || data[0] !== data[0].toUpperCase() || data.split(\"\\n\").length > 1) {\n        data = node.data.getName();\n      } else if (data.length > MAX_DATA_DISPLAY_NAME_LENGTH) {\n        data = `${data.substring(0, MAX_DATA_DISPLAY_NAME_LENGTH)}...`;\n      }\n      return data.startsWith(\"Runnable\") ? data.slice(\"Runnable\".length) : data;\n    } catch (error) {\n      return node.data.getName();\n    }\n  } else {\n    return node.data.name ?? \"UnknownSchema\";\n  }\n}\nfunction nodeDataJson(node) {\n  // if node.data is implements Runnable\n  if (isRunnableInterface(node.data)) {\n    return {\n      type: \"runnable\",\n      data: {\n        id: node.data.lc_id,\n        name: node.data.getName()\n      }\n    };\n  } else {\n    return {\n      type: \"schema\",\n      data: {\n        ...zodToJsonSchema(node.data.schema),\n        title: node.data.name\n      }\n    };\n  }\n}\nexport class Graph {\n  constructor() {\n    Object.defineProperty(this, \"nodes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"edges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n  // Convert the graph to a JSON-serializable format.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  toJSON() {\n    const stableNodeIds = {};\n    Object.values(this.nodes).forEach((node, i) => {\n      stableNodeIds[node.id] = isUuid(node.id) ? i : node.id;\n    });\n    return {\n      nodes: Object.values(this.nodes).map(node => ({\n        id: stableNodeIds[node.id],\n        ...nodeDataJson(node)\n      })),\n      edges: this.edges.map(edge => edge.data ? {\n        source: stableNodeIds[edge.source],\n        target: stableNodeIds[edge.target],\n        data: edge.data\n      } : {\n        source: stableNodeIds[edge.source],\n        target: stableNodeIds[edge.target]\n      })\n    };\n  }\n  addNode(data, id) {\n    if (id !== undefined && this.nodes[id] !== undefined) {\n      throw new Error(`Node with id ${id} already exists`);\n    }\n    const nodeId = id || uuidv4();\n    const node = {\n      id: nodeId,\n      data\n    };\n    this.nodes[nodeId] = node;\n    return node;\n  }\n  removeNode(node) {\n    // Remove the node from the nodes map\n    delete this.nodes[node.id];\n    // Filter out edges connected to the node\n    this.edges = this.edges.filter(edge => edge.source !== node.id && edge.target !== node.id);\n  }\n  addEdge(source, target, data) {\n    if (this.nodes[source.id] === undefined) {\n      throw new Error(`Source node ${source.id} not in graph`);\n    }\n    if (this.nodes[target.id] === undefined) {\n      throw new Error(`Target node ${target.id} not in graph`);\n    }\n    const edge = {\n      source: source.id,\n      target: target.id,\n      data\n    };\n    this.edges.push(edge);\n    return edge;\n  }\n  firstNode() {\n    const targets = new Set(this.edges.map(edge => edge.target));\n    const found = [];\n    Object.values(this.nodes).forEach(node => {\n      if (!targets.has(node.id)) {\n        found.push(node);\n      }\n    });\n    return found[0];\n  }\n  lastNode() {\n    const sources = new Set(this.edges.map(edge => edge.source));\n    const found = [];\n    Object.values(this.nodes).forEach(node => {\n      if (!sources.has(node.id)) {\n        found.push(node);\n      }\n    });\n    return found[0];\n  }\n  extend(graph) {\n    // Add all nodes from the other graph, taking care to avoid duplicates\n    Object.entries(graph.nodes).forEach(([key, value]) => {\n      this.nodes[key] = value;\n    });\n    // Add all edges from the other graph\n    this.edges = [...this.edges, ...graph.edges];\n  }\n  trimFirstNode() {\n    const firstNode = this.firstNode();\n    if (firstNode) {\n      const outgoingEdges = this.edges.filter(edge => edge.source === firstNode.id);\n      if (Object.keys(this.nodes).length === 1 || outgoingEdges.length === 1) {\n        this.removeNode(firstNode);\n      }\n    }\n  }\n  trimLastNode() {\n    const lastNode = this.lastNode();\n    if (lastNode) {\n      const incomingEdges = this.edges.filter(edge => edge.target === lastNode.id);\n      if (Object.keys(this.nodes).length === 1 || incomingEdges.length === 1) {\n        this.removeNode(lastNode);\n      }\n    }\n  }\n}","map":{"version":3,"names":["zodToJsonSchema","v4","uuidv4","validate","isUuid","isRunnableInterface","MAX_DATA_DISPLAY_NAME_LENGTH","nodeDataStr","node","id","data","toString","startsWith","toUpperCase","split","length","getName","substring","slice","error","name","nodeDataJson","type","lc_id","schema","title","Graph","constructor","Object","defineProperty","enumerable","configurable","writable","value","toJSON","stableNodeIds","values","nodes","forEach","i","map","edges","edge","source","target","addNode","undefined","Error","nodeId","removeNode","filter","addEdge","push","firstNode","targets","Set","found","has","lastNode","sources","extend","graph","entries","key","trimFirstNode","outgoingEdges","keys","trimLastNode","incomingEdges"],"sources":["C:/Users/lucil/Gen-AI-Contest/FrontEnd/kridic-front/node_modules/@langchain/core/dist/runnables/graph.js"],"sourcesContent":["import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { v4 as uuidv4, validate as isUuid } from \"uuid\";\nimport { isRunnableInterface } from \"./utils.js\";\nconst MAX_DATA_DISPLAY_NAME_LENGTH = 42;\nexport function nodeDataStr(node) {\n    if (!isUuid(node.id)) {\n        return node.id;\n    }\n    else if (isRunnableInterface(node.data)) {\n        try {\n            let data = node.data.toString();\n            if (data.startsWith(\"<\") ||\n                data[0] !== data[0].toUpperCase() ||\n                data.split(\"\\n\").length > 1) {\n                data = node.data.getName();\n            }\n            else if (data.length > MAX_DATA_DISPLAY_NAME_LENGTH) {\n                data = `${data.substring(0, MAX_DATA_DISPLAY_NAME_LENGTH)}...`;\n            }\n            return data.startsWith(\"Runnable\") ? data.slice(\"Runnable\".length) : data;\n        }\n        catch (error) {\n            return node.data.getName();\n        }\n    }\n    else {\n        return node.data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data is implements Runnable\n    if (isRunnableInterface(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName(),\n            },\n        };\n    }\n    else {\n        return {\n            type: \"schema\",\n            data: { ...zodToJsonSchema(node.data.schema), title: node.data.name },\n        };\n    }\n}\nexport class Graph {\n    constructor() {\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i) => {\n            stableNodeIds[node.id] = isUuid(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node) => ({\n                id: stableNodeIds[node.id],\n                ...nodeDataJson(node),\n            })),\n            edges: this.edges.map((edge) => edge.data\n                ? {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target],\n                    data: edge.data,\n                }\n                : {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target],\n                }),\n        };\n    }\n    addNode(data, id) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id || uuidv4();\n        const node = { id: nodeId, data };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge) => edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = { source: source.id, target: target.id, data };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        const targets = new Set(this.edges.map((edge) => edge.target));\n        const found = [];\n        Object.values(this.nodes).forEach((node) => {\n            if (!targets.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    lastNode() {\n        const sources = new Set(this.edges.map((edge) => edge.source));\n        const found = [];\n        Object.values(this.nodes).forEach((node) => {\n            if (!sources.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    extend(graph) {\n        // Add all nodes from the other graph, taking care to avoid duplicates\n        Object.entries(graph.nodes).forEach(([key, value]) => {\n            this.nodes[key] = value;\n        });\n        // Add all edges from the other graph\n        this.edges = [...this.edges, ...graph.edges];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode) {\n            const outgoingEdges = this.edges.filter((edge) => edge.source === firstNode.id);\n            if (Object.keys(this.nodes).length === 1 || outgoingEdges.length === 1) {\n                this.removeNode(firstNode);\n            }\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode) {\n            const incomingEdges = this.edges.filter((edge) => edge.target === lastNode.id);\n            if (Object.keys(this.nodes).length === 1 || incomingEdges.length === 1) {\n                this.removeNode(lastNode);\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}