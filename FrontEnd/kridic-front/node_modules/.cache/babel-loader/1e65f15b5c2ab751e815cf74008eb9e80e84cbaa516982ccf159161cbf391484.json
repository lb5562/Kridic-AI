{"ast":null,"code":"class MockAsyncLocalStorage {\n  getStore() {\n    return undefined;\n  }\n  run(_, callback) {\n    return callback();\n  }\n}\nclass AsyncLocalStorageProvider {\n  constructor() {\n    Object.defineProperty(this, \"asyncLocalStorage\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new MockAsyncLocalStorage()\n    });\n    Object.defineProperty(this, \"hasBeenInitialized\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n  }\n  getInstance() {\n    return this.asyncLocalStorage;\n  }\n  initializeGlobalInstance(instance) {\n    if (!this.hasBeenInitialized) {\n      this.hasBeenInitialized = true;\n      this.asyncLocalStorage = instance;\n    }\n  }\n}\nexport const AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n/**\n * Return the current run tree from within a traceable-wrapped function.\n * Will throw an error if called outside of a traceable function.\n *\n * @returns The run tree for the given context.\n */\nexport const getCurrentRunTree = () => {\n  const runTree = AsyncLocalStorageProviderSingleton.getInstance().getStore();\n  if (runTree === undefined) {\n    throw new Error([\"Could not get the current run tree.\", \"\", \"Please make sure you are calling this method within a traceable function or the tracing is enabled.\"].join(\"\\n\"));\n  }\n  return runTree;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withRunTree(runTree, fn) {\n  const storage = AsyncLocalStorageProviderSingleton.getInstance();\n  return new Promise((resolve, reject) => {\n    storage.run(runTree, () => void Promise.resolve(fn()).then(resolve).catch(reject));\n  });\n}\nexport const ROOT = Symbol.for(\"langsmith:traceable:root\");\nexport function isTraceableFunction(x\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  return typeof x === \"function\" && \"langsmith:traceable\" in x;\n}","map":{"version":3,"names":["MockAsyncLocalStorage","getStore","undefined","run","_","callback","AsyncLocalStorageProvider","constructor","Object","defineProperty","enumerable","configurable","writable","value","getInstance","asyncLocalStorage","initializeGlobalInstance","instance","hasBeenInitialized","AsyncLocalStorageProviderSingleton","getCurrentRunTree","runTree","Error","join","withRunTree","fn","storage","Promise","resolve","reject","then","catch","ROOT","Symbol","for","isTraceableFunction","x"],"sources":["C:/Users/lucil/Gen-AI-Contest/FrontEnd/kridic-front/node_modules/langsmith/dist/singletons/traceable.js"],"sourcesContent":["class MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_, callback) {\n        return callback();\n    }\n}\nclass AsyncLocalStorageProvider {\n    constructor() {\n        Object.defineProperty(this, \"asyncLocalStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockAsyncLocalStorage()\n        });\n        Object.defineProperty(this, \"hasBeenInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    getInstance() {\n        return this.asyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        if (!this.hasBeenInitialized) {\n            this.hasBeenInitialized = true;\n            this.asyncLocalStorage = instance;\n        }\n    }\n}\nexport const AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n/**\n * Return the current run tree from within a traceable-wrapped function.\n * Will throw an error if called outside of a traceable function.\n *\n * @returns The run tree for the given context.\n */\nexport const getCurrentRunTree = () => {\n    const runTree = AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    if (runTree === undefined) {\n        throw new Error([\n            \"Could not get the current run tree.\",\n            \"\",\n            \"Please make sure you are calling this method within a traceable function or the tracing is enabled.\",\n        ].join(\"\\n\"));\n    }\n    return runTree;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withRunTree(runTree, fn) {\n    const storage = AsyncLocalStorageProviderSingleton.getInstance();\n    return new Promise((resolve, reject) => {\n        storage.run(runTree, () => void Promise.resolve(fn()).then(resolve).catch(reject));\n    });\n}\nexport const ROOT = Symbol.for(\"langsmith:traceable:root\");\nexport function isTraceableFunction(x\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    return typeof x === \"function\" && \"langsmith:traceable\" in x;\n}\n"],"mappings":"AAAA,MAAMA,qBAAqB,CAAC;EACxBC,QAAQA,CAAA,EAAG;IACP,OAAOC,SAAS;EACpB;EACAC,GAAGA,CAACC,CAAC,EAAEC,QAAQ,EAAE;IACb,OAAOA,QAAQ,CAAC,CAAC;EACrB;AACJ;AACA,MAAMC,yBAAyB,CAAC;EAC5BC,WAAWA,CAAA,EAAG;IACVC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,mBAAmB,EAAE;MAC7CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,IAAIb,qBAAqB,CAAC;IACrC,CAAC,CAAC;IACFQ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,oBAAoB,EAAE;MAC9CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EACAC,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,iBAAiB;EACjC;EACAC,wBAAwBA,CAACC,QAAQ,EAAE;IAC/B,IAAI,CAAC,IAAI,CAACC,kBAAkB,EAAE;MAC1B,IAAI,CAACA,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACH,iBAAiB,GAAGE,QAAQ;IACrC;EACJ;AACJ;AACA,OAAO,MAAME,kCAAkC,GAAG,IAAIb,yBAAyB,CAAC,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;EACnC,MAAMC,OAAO,GAAGF,kCAAkC,CAACL,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,CAAC;EAC3E,IAAIoB,OAAO,KAAKnB,SAAS,EAAE;IACvB,MAAM,IAAIoB,KAAK,CAAC,CACZ,qCAAqC,EACrC,EAAE,EACF,qGAAqG,CACxG,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACjB;EACA,OAAOF,OAAO;AAClB,CAAC;AACD;AACA,OAAO,SAASG,WAAWA,CAACH,OAAO,EAAEI,EAAE,EAAE;EACrC,MAAMC,OAAO,GAAGP,kCAAkC,CAACL,WAAW,CAAC,CAAC;EAChE,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCH,OAAO,CAACvB,GAAG,CAACkB,OAAO,EAAE,MAAM,KAAKM,OAAO,CAACC,OAAO,CAACH,EAAE,CAAC,CAAC,CAAC,CAACK,IAAI,CAACF,OAAO,CAAC,CAACG,KAAK,CAACF,MAAM,CAAC,CAAC;EACtF,CAAC,CAAC;AACN;AACA,OAAO,MAAMG,IAAI,GAAGC,MAAM,CAACC,GAAG,CAAC,0BAA0B,CAAC;AAC1D,OAAO,SAASC,mBAAmBA,CAACC;AACpC;AAAA,EACE;EACE,OAAO,OAAOA,CAAC,KAAK,UAAU,IAAI,qBAAqB,IAAIA,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}