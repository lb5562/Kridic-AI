{"ast":null,"code":"import { Runnable, _coerceToDict } from \"./base.js\";\nimport { getCallbackManagerForConfig } from \"./config.js\";\nimport { Document } from \"../documents/index.js\";\nimport { ChatPromptValue, StringPromptValue } from \"../prompt_values.js\";\nimport { RunLogPatch, RunLog } from \"../tracers/log_stream.js\";\nimport { AIMessage, AIMessageChunk, ChatMessage, ChatMessageChunk, FunctionMessage, FunctionMessageChunk, HumanMessage, HumanMessageChunk, SystemMessage, SystemMessageChunk, ToolMessage, ToolMessageChunk, isBaseMessage } from \"../messages/index.js\";\nimport { GenerationChunk, ChatGenerationChunk, RUN_KEY } from \"../outputs.js\";\nimport { convertEventStreamToIterableReadableDataStream } from \"../utils/event_source_parse.js\";\nimport { IterableReadableStream, concat } from \"../utils/stream.js\";\nfunction isSuperset(set, subset) {\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction revive(obj) {\n  if (Array.isArray(obj)) return obj.map(revive);\n  if (typeof obj === \"object\") {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (!obj || obj instanceof Date) {\n      return obj;\n    }\n    const keysArr = Object.keys(obj);\n    const keys = new Set(keysArr);\n    if (isSuperset(keys, new Set([\"page_content\", \"metadata\"]))) {\n      return new Document({\n        pageContent: obj.page_content,\n        metadata: obj.metadata\n      });\n    }\n    if (isSuperset(keys, new Set([\"content\", \"type\", \"additional_kwargs\"]))) {\n      if (obj.type === \"HumanMessage\" || obj.type === \"human\") {\n        return new HumanMessage({\n          content: obj.content\n        });\n      }\n      if (obj.type === \"SystemMessage\" || obj.type === \"system\") {\n        return new SystemMessage({\n          content: obj.content\n        });\n      }\n      if (obj.type === \"ChatMessage\" || obj.type === \"chat\") {\n        return new ChatMessage({\n          content: obj.content,\n          role: obj.role\n        });\n      }\n      if (obj.type === \"FunctionMessage\" || obj.type === \"function\") {\n        return new FunctionMessage({\n          content: obj.content,\n          name: obj.name\n        });\n      }\n      if (obj.type === \"ToolMessage\" || obj.type === \"tool\") {\n        return new ToolMessage({\n          content: obj.content,\n          tool_call_id: obj.tool_call_id\n        });\n      }\n      if (obj.type === \"AIMessage\" || obj.type === \"ai\") {\n        return new AIMessage({\n          content: obj.content\n        });\n      }\n      if (obj.type === \"HumanMessageChunk\") {\n        return new HumanMessageChunk({\n          content: obj.content\n        });\n      }\n      if (obj.type === \"SystemMessageChunk\") {\n        return new SystemMessageChunk({\n          content: obj.content\n        });\n      }\n      if (obj.type === \"ChatMessageChunk\") {\n        return new ChatMessageChunk({\n          content: obj.content,\n          role: obj.role\n        });\n      }\n      if (obj.type === \"FunctionMessageChunk\") {\n        return new FunctionMessageChunk({\n          content: obj.content,\n          name: obj.name\n        });\n      }\n      if (obj.type === \"ToolMessageChunk\") {\n        return new ToolMessageChunk({\n          content: obj.content,\n          tool_call_id: obj.tool_call_id\n        });\n      }\n      if (obj.type === \"AIMessageChunk\") {\n        return new AIMessageChunk({\n          content: obj.content\n        });\n      }\n    }\n    if (isSuperset(keys, new Set([\"text\", \"generation_info\", \"type\"]))) {\n      if (obj.type === \"ChatGenerationChunk\") {\n        return new ChatGenerationChunk({\n          message: revive(obj.message),\n          text: obj.text,\n          generationInfo: obj.generation_info\n        });\n      } else if (obj.type === \"ChatGeneration\") {\n        return {\n          message: revive(obj.message),\n          text: obj.text,\n          generationInfo: obj.generation_info\n        };\n      } else if (obj.type === \"GenerationChunk\") {\n        return new GenerationChunk({\n          text: obj.text,\n          generationInfo: obj.generation_info\n        });\n      } else if (obj.type === \"Generation\") {\n        return {\n          text: obj.text,\n          generationInfo: obj.generation_info\n        };\n      }\n    }\n    if (isSuperset(keys, new Set([\"tool\", \"tool_input\", \"log\", \"type\"]))) {\n      if (obj.type === \"AgentAction\") {\n        return {\n          tool: obj.tool,\n          toolInput: obj.tool_input,\n          log: obj.log\n        };\n      }\n    }\n    if (isSuperset(keys, new Set([\"return_values\", \"log\", \"type\"]))) {\n      if (obj.type === \"AgentFinish\") {\n        return {\n          returnValues: obj.return_values,\n          log: obj.log\n        };\n      }\n    }\n    if (isSuperset(keys, new Set([\"generations\", \"run\", \"type\"]))) {\n      if (obj.type === \"LLMResult\") {\n        return {\n          generations: revive(obj.generations),\n          llmOutput: obj.llm_output,\n          [RUN_KEY]: obj.run\n        };\n      }\n    }\n    if (isSuperset(keys, new Set([\"messages\"]))) {\n      // TODO: Start checking for type: ChatPromptValue and ChatPromptValueConcrete\n      // when LangServe bug is fixed\n      return new ChatPromptValue({\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        messages: obj.messages.map(msg => revive(msg))\n      });\n    }\n    if (isSuperset(keys, new Set([\"text\"]))) {\n      // TODO: Start checking for type: StringPromptValue\n      // when LangServe bug is fixed\n      return new StringPromptValue(obj.text);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const innerRevive = key => [key, revive(obj[key])];\n    const rtn = Object.fromEntries(keysArr.map(innerRevive));\n    return rtn;\n  }\n  return obj;\n}\nfunction deserialize(str) {\n  const obj = JSON.parse(str);\n  return revive(obj);\n}\nfunction removeCallbacks(options) {\n  const rest = {\n    ...options\n  };\n  delete rest.callbacks;\n  return rest;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serialize(input) {\n  if (Array.isArray(input)) return input.map(serialize);\n  if (isBaseMessage(input)) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const serializedMessage = {\n      content: input.content,\n      type: input._getType(),\n      additional_kwargs: input.additional_kwargs,\n      name: input.name,\n      example: false\n    };\n    if (ToolMessage.isInstance(input)) {\n      serializedMessage.tool_call_id = input.tool_call_id;\n    } else if (ChatMessage.isInstance(input)) {\n      serializedMessage.role = input.role;\n    }\n    return serializedMessage;\n  }\n  if (typeof input === \"object\") {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (!input || input instanceof Date) {\n      return input;\n    }\n    const keysArr = Object.keys(input);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const innerSerialize = key => [key, serialize(input[key])];\n    const rtn = Object.fromEntries(keysArr.map(innerSerialize));\n    return rtn;\n  }\n  return input;\n}\nexport class RemoteRunnable extends Runnable {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"url\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain\", \"schema\", \"runnable\", \"remote\"]\n    });\n    const {\n      url,\n      options\n    } = fields;\n    this.url = url.replace(/\\/$/, \"\"); // remove trailing slash\n    this.options = options;\n  }\n  async post(path, body) {\n    return fetch(`${this.url}${path}`, {\n      method: \"POST\",\n      body: JSON.stringify(serialize(body)),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...this.options?.headers\n      },\n      signal: AbortSignal.timeout(this.options?.timeout ?? 60000)\n    });\n  }\n  async _invoke(input, options, _) {\n    const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n    const response = await this.post(\"/invoke\", {\n      input,\n      config: removeCallbacks(config),\n      kwargs: kwargs ?? {}\n    });\n    if (!response.ok) {\n      throw new Error(`${response.status} Error: ${await response.text()}`);\n    }\n    return revive((await response.json()).output);\n  }\n  async invoke(input, options) {\n    return this._callWithConfig(this._invoke, input, options);\n  }\n  async _batch(inputs, options, _, batchOptions) {\n    if (batchOptions?.returnExceptions) {\n      throw new Error(\"returnExceptions is not supported for remote clients\");\n    }\n    const configsAndKwargsArray = options?.map(opts => this._separateRunnableConfigFromCallOptions(opts));\n    const [configs, kwargs] = configsAndKwargsArray?.reduce(([pc, pk], [c, k]) => [[...pc, c], [...pk, k]], [[], []]) ?? [undefined, undefined];\n    const response = await this.post(\"/batch\", {\n      inputs,\n      config: (configs ?? []).map(removeCallbacks).map(config => ({\n        ...config,\n        ...batchOptions\n      })),\n      kwargs\n    });\n    if (!response.ok) {\n      throw new Error(`${response.status} Error: ${await response.text()}`);\n    }\n    const body = await response.json();\n    if (!body.output) throw new Error(\"Invalid response from remote runnable\");\n    return revive(body.output);\n  }\n  async batch(inputs, options, batchOptions) {\n    if (batchOptions?.returnExceptions) {\n      throw Error(\"returnExceptions is not supported for remote clients\");\n    }\n    return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n  }\n  async *_streamIterator(input, options) {\n    const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n    const callbackManager_ = await getCallbackManagerForConfig(options);\n    const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n    delete config.runId;\n    let finalOutput;\n    let finalOutputSupported = true;\n    try {\n      const response = await this.post(\"/stream\", {\n        input,\n        config: removeCallbacks(config),\n        kwargs\n      });\n      if (!response.ok) {\n        const json = await response.json();\n        const error = new Error(`RemoteRunnable call failed with status code ${response.status}: ${json.message}`);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.response = response;\n        throw error;\n      }\n      const {\n        body\n      } = response;\n      if (!body) {\n        throw new Error(\"Could not begin remote stream. Please check the given URL and try again.\");\n      }\n      const runnableStream = convertEventStreamToIterableReadableDataStream(body);\n      for await (const chunk of runnableStream) {\n        const deserializedChunk = deserialize(chunk);\n        yield deserializedChunk;\n        if (finalOutputSupported) {\n          if (finalOutput === undefined) {\n            finalOutput = deserializedChunk;\n          } else {\n            try {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              finalOutput = concat(finalOutput, deserializedChunk);\n            } catch {\n              finalOutput = undefined;\n              finalOutputSupported = false;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      await runManager?.handleChainError(err);\n      throw err;\n    }\n    await runManager?.handleChainEnd(finalOutput ?? {});\n  }\n  async *streamLog(input, options, streamOptions) {\n    const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n    const callbackManager_ = await getCallbackManagerForConfig(options);\n    const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n    delete config.runId;\n    // The type is in camelCase but the API only accepts snake_case.\n    const camelCaseStreamOptions = {\n      include_names: streamOptions?.includeNames,\n      include_types: streamOptions?.includeTypes,\n      include_tags: streamOptions?.includeTags,\n      exclude_names: streamOptions?.excludeNames,\n      exclude_types: streamOptions?.excludeTypes,\n      exclude_tags: streamOptions?.excludeTags\n    };\n    let runLog;\n    try {\n      const response = await this.post(\"/stream_log\", {\n        input,\n        config: removeCallbacks(config),\n        kwargs,\n        ...camelCaseStreamOptions,\n        diff: false\n      });\n      const {\n        body,\n        ok\n      } = response;\n      if (!ok) {\n        throw new Error(`${response.status} Error: ${await response.text()}`);\n      }\n      if (!body) {\n        throw new Error(\"Could not begin remote stream log. Please check the given URL and try again.\");\n      }\n      const runnableStream = convertEventStreamToIterableReadableDataStream(body);\n      for await (const log of runnableStream) {\n        const chunk = revive(JSON.parse(log));\n        const logPatch = new RunLogPatch({\n          ops: chunk.ops\n        });\n        yield logPatch;\n        if (runLog === undefined) {\n          runLog = RunLog.fromRunLogPatch(logPatch);\n        } else {\n          runLog = runLog.concat(logPatch);\n        }\n      }\n    } catch (err) {\n      await runManager?.handleChainError(err);\n      throw err;\n    }\n    await runManager?.handleChainEnd(runLog?.state.final_output);\n  }\n  _streamEvents(input, options, streamOptions) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const outerThis = this;\n    const generator = async function* () {\n      const [config, kwargs] = outerThis._separateRunnableConfigFromCallOptions(options);\n      const callbackManager_ = await getCallbackManagerForConfig(options);\n      const runManager = await callbackManager_?.handleChainStart(outerThis.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n      delete config.runId;\n      // The type is in camelCase but the API only accepts snake_case.\n      const camelCaseStreamOptions = {\n        include_names: streamOptions?.includeNames,\n        include_types: streamOptions?.includeTypes,\n        include_tags: streamOptions?.includeTags,\n        exclude_names: streamOptions?.excludeNames,\n        exclude_types: streamOptions?.excludeTypes,\n        exclude_tags: streamOptions?.excludeTags\n      };\n      const events = [];\n      try {\n        const response = await outerThis.post(\"/stream_events\", {\n          input,\n          config: removeCallbacks(config),\n          kwargs,\n          ...camelCaseStreamOptions,\n          diff: false\n        });\n        const {\n          body,\n          ok\n        } = response;\n        if (!ok) {\n          throw new Error(`${response.status} Error: ${await response.text()}`);\n        }\n        if (!body) {\n          throw new Error(\"Could not begin remote stream events. Please check the given URL and try again.\");\n        }\n        const runnableStream = convertEventStreamToIterableReadableDataStream(body);\n        for await (const log of runnableStream) {\n          const chunk = revive(JSON.parse(log));\n          const event = {\n            event: chunk.event,\n            name: chunk.name,\n            run_id: chunk.run_id,\n            tags: chunk.tags,\n            metadata: chunk.metadata,\n            data: chunk.data\n          };\n          yield event;\n          events.push(event);\n        }\n      } catch (err) {\n        await runManager?.handleChainError(err);\n        throw err;\n      }\n      await runManager?.handleChainEnd(events);\n    };\n    return generator();\n  }\n  streamEvents(input, options, streamOptions) {\n    if (options.version !== \"v1\" && options.version !== \"v2\") {\n      throw new Error(`Only versions \"v1\" and \"v2\" of the events schema is currently supported.`);\n    }\n    if (options.encoding !== undefined) {\n      throw new Error(\"Special encodings are not supported for this runnable.\");\n    }\n    const eventStream = this._streamEvents(input, options, streamOptions);\n    return IterableReadableStream.fromAsyncGenerator(eventStream);\n  }\n}","map":{"version":3,"names":["Runnable","_coerceToDict","getCallbackManagerForConfig","Document","ChatPromptValue","StringPromptValue","RunLogPatch","RunLog","AIMessage","AIMessageChunk","ChatMessage","ChatMessageChunk","FunctionMessage","FunctionMessageChunk","HumanMessage","HumanMessageChunk","SystemMessage","SystemMessageChunk","ToolMessage","ToolMessageChunk","isBaseMessage","GenerationChunk","ChatGenerationChunk","RUN_KEY","convertEventStreamToIterableReadableDataStream","IterableReadableStream","concat","isSuperset","set","subset","elem","has","revive","obj","Array","isArray","map","Date","keysArr","Object","keys","Set","pageContent","page_content","metadata","type","content","role","name","tool_call_id","message","text","generationInfo","generation_info","tool","toolInput","tool_input","log","returnValues","return_values","generations","llmOutput","llm_output","run","messages","msg","innerRevive","key","rtn","fromEntries","deserialize","str","JSON","parse","removeCallbacks","options","rest","callbacks","serialize","input","serializedMessage","_getType","additional_kwargs","example","isInstance","innerSerialize","RemoteRunnable","constructor","fields","defineProperty","enumerable","configurable","writable","value","url","replace","post","path","body","fetch","method","stringify","headers","signal","AbortSignal","timeout","_invoke","_","config","kwargs","_separateRunnableConfigFromCallOptions","response","ok","Error","status","json","output","invoke","_callWithConfig","_batch","inputs","batchOptions","returnExceptions","configsAndKwargsArray","opts","configs","reduce","pc","pk","c","k","undefined","batch","_batchWithConfig","bind","_streamIterator","callbackManager_","runManager","handleChainStart","toJSON","runId","runName","finalOutput","finalOutputSupported","error","runnableStream","chunk","deserializedChunk","err","handleChainError","handleChainEnd","streamLog","streamOptions","camelCaseStreamOptions","include_names","includeNames","include_types","includeTypes","include_tags","includeTags","exclude_names","excludeNames","exclude_types","excludeTypes","exclude_tags","excludeTags","runLog","diff","logPatch","ops","fromRunLogPatch","state","final_output","_streamEvents","outerThis","generator","events","event","run_id","tags","data","push","streamEvents","version","encoding","eventStream","fromAsyncGenerator"],"sources":["C:/Users/lucil/Gen-AI-Contest/FrontEnd/kridic-front/node_modules/@langchain/core/dist/runnables/remote.js"],"sourcesContent":["import { Runnable, _coerceToDict } from \"./base.js\";\nimport { getCallbackManagerForConfig } from \"./config.js\";\nimport { Document } from \"../documents/index.js\";\nimport { ChatPromptValue, StringPromptValue } from \"../prompt_values.js\";\nimport { RunLogPatch, RunLog, } from \"../tracers/log_stream.js\";\nimport { AIMessage, AIMessageChunk, ChatMessage, ChatMessageChunk, FunctionMessage, FunctionMessageChunk, HumanMessage, HumanMessageChunk, SystemMessage, SystemMessageChunk, ToolMessage, ToolMessageChunk, isBaseMessage, } from \"../messages/index.js\";\nimport { GenerationChunk, ChatGenerationChunk, RUN_KEY } from \"../outputs.js\";\nimport { convertEventStreamToIterableReadableDataStream } from \"../utils/event_source_parse.js\";\nimport { IterableReadableStream, concat } from \"../utils/stream.js\";\nfunction isSuperset(set, subset) {\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction revive(obj) {\n    if (Array.isArray(obj))\n        return obj.map(revive);\n    if (typeof obj === \"object\") {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (!obj || obj instanceof Date) {\n            return obj;\n        }\n        const keysArr = Object.keys(obj);\n        const keys = new Set(keysArr);\n        if (isSuperset(keys, new Set([\"page_content\", \"metadata\"]))) {\n            return new Document({\n                pageContent: obj.page_content,\n                metadata: obj.metadata,\n            });\n        }\n        if (isSuperset(keys, new Set([\"content\", \"type\", \"additional_kwargs\"]))) {\n            if (obj.type === \"HumanMessage\" || obj.type === \"human\") {\n                return new HumanMessage({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"SystemMessage\" || obj.type === \"system\") {\n                return new SystemMessage({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"ChatMessage\" || obj.type === \"chat\") {\n                return new ChatMessage({\n                    content: obj.content,\n                    role: obj.role,\n                });\n            }\n            if (obj.type === \"FunctionMessage\" || obj.type === \"function\") {\n                return new FunctionMessage({\n                    content: obj.content,\n                    name: obj.name,\n                });\n            }\n            if (obj.type === \"ToolMessage\" || obj.type === \"tool\") {\n                return new ToolMessage({\n                    content: obj.content,\n                    tool_call_id: obj.tool_call_id,\n                });\n            }\n            if (obj.type === \"AIMessage\" || obj.type === \"ai\") {\n                return new AIMessage({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"HumanMessageChunk\") {\n                return new HumanMessageChunk({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"SystemMessageChunk\") {\n                return new SystemMessageChunk({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"ChatMessageChunk\") {\n                return new ChatMessageChunk({\n                    content: obj.content,\n                    role: obj.role,\n                });\n            }\n            if (obj.type === \"FunctionMessageChunk\") {\n                return new FunctionMessageChunk({\n                    content: obj.content,\n                    name: obj.name,\n                });\n            }\n            if (obj.type === \"ToolMessageChunk\") {\n                return new ToolMessageChunk({\n                    content: obj.content,\n                    tool_call_id: obj.tool_call_id,\n                });\n            }\n            if (obj.type === \"AIMessageChunk\") {\n                return new AIMessageChunk({\n                    content: obj.content,\n                });\n            }\n        }\n        if (isSuperset(keys, new Set([\"text\", \"generation_info\", \"type\"]))) {\n            if (obj.type === \"ChatGenerationChunk\") {\n                return new ChatGenerationChunk({\n                    message: revive(obj.message),\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                });\n            }\n            else if (obj.type === \"ChatGeneration\") {\n                return {\n                    message: revive(obj.message),\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                };\n            }\n            else if (obj.type === \"GenerationChunk\") {\n                return new GenerationChunk({\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                });\n            }\n            else if (obj.type === \"Generation\") {\n                return {\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"tool\", \"tool_input\", \"log\", \"type\"]))) {\n            if (obj.type === \"AgentAction\") {\n                return {\n                    tool: obj.tool,\n                    toolInput: obj.tool_input,\n                    log: obj.log,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"return_values\", \"log\", \"type\"]))) {\n            if (obj.type === \"AgentFinish\") {\n                return {\n                    returnValues: obj.return_values,\n                    log: obj.log,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"generations\", \"run\", \"type\"]))) {\n            if (obj.type === \"LLMResult\") {\n                return {\n                    generations: revive(obj.generations),\n                    llmOutput: obj.llm_output,\n                    [RUN_KEY]: obj.run,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"messages\"]))) {\n            // TODO: Start checking for type: ChatPromptValue and ChatPromptValueConcrete\n            // when LangServe bug is fixed\n            return new ChatPromptValue({\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                messages: obj.messages.map((msg) => revive(msg)),\n            });\n        }\n        if (isSuperset(keys, new Set([\"text\"]))) {\n            // TODO: Start checking for type: StringPromptValue\n            // when LangServe bug is fixed\n            return new StringPromptValue(obj.text);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const innerRevive = (key) => [\n            key,\n            revive(obj[key]),\n        ];\n        const rtn = Object.fromEntries(keysArr.map(innerRevive));\n        return rtn;\n    }\n    return obj;\n}\nfunction deserialize(str) {\n    const obj = JSON.parse(str);\n    return revive(obj);\n}\nfunction removeCallbacks(options) {\n    const rest = { ...options };\n    delete rest.callbacks;\n    return rest;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serialize(input) {\n    if (Array.isArray(input))\n        return input.map(serialize);\n    if (isBaseMessage(input)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const serializedMessage = {\n            content: input.content,\n            type: input._getType(),\n            additional_kwargs: input.additional_kwargs,\n            name: input.name,\n            example: false,\n        };\n        if (ToolMessage.isInstance(input)) {\n            serializedMessage.tool_call_id = input.tool_call_id;\n        }\n        else if (ChatMessage.isInstance(input)) {\n            serializedMessage.role = input.role;\n        }\n        return serializedMessage;\n    }\n    if (typeof input === \"object\") {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (!input || input instanceof Date) {\n            return input;\n        }\n        const keysArr = Object.keys(input);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const innerSerialize = (key) => [\n            key,\n            serialize(input[key]),\n        ];\n        const rtn = Object.fromEntries(keysArr.map(innerSerialize));\n        return rtn;\n    }\n    return input;\n}\nexport class RemoteRunnable extends Runnable {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"schema\", \"runnable\", \"remote\"]\n        });\n        const { url, options } = fields;\n        this.url = url.replace(/\\/$/, \"\"); // remove trailing slash\n        this.options = options;\n    }\n    async post(path, body) {\n        return fetch(`${this.url}${path}`, {\n            method: \"POST\",\n            body: JSON.stringify(serialize(body)),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this.options?.headers,\n            },\n            signal: AbortSignal.timeout(this.options?.timeout ?? 60000),\n        });\n    }\n    async _invoke(input, options, _) {\n        const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n        const response = await this.post(\"/invoke\", {\n            input,\n            config: removeCallbacks(config),\n            kwargs: kwargs ?? {},\n        });\n        if (!response.ok) {\n            throw new Error(`${response.status} Error: ${await response.text()}`);\n        }\n        return revive((await response.json()).output);\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n    async _batch(inputs, options, _, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"returnExceptions is not supported for remote clients\");\n        }\n        const configsAndKwargsArray = options?.map((opts) => this._separateRunnableConfigFromCallOptions(opts));\n        const [configs, kwargs] = configsAndKwargsArray?.reduce(([pc, pk], [c, k]) => [\n            [...pc, c],\n            [...pk, k],\n        ], [[], []]) ?? [undefined, undefined];\n        const response = await this.post(\"/batch\", {\n            inputs,\n            config: (configs ?? [])\n                .map(removeCallbacks)\n                .map((config) => ({ ...config, ...batchOptions })),\n            kwargs,\n        });\n        if (!response.ok) {\n            throw new Error(`${response.status} Error: ${await response.text()}`);\n        }\n        const body = await response.json();\n        if (!body.output)\n            throw new Error(\"Invalid response from remote runnable\");\n        return revive(body.output);\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw Error(\"returnExceptions is not supported for remote clients\");\n        }\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n        const callbackManager_ = await getCallbackManagerForConfig(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n        delete config.runId;\n        let finalOutput;\n        let finalOutputSupported = true;\n        try {\n            const response = await this.post(\"/stream\", {\n                input,\n                config: removeCallbacks(config),\n                kwargs,\n            });\n            if (!response.ok) {\n                const json = await response.json();\n                const error = new Error(`RemoteRunnable call failed with status code ${response.status}: ${json.message}`);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.response = response;\n                throw error;\n            }\n            const { body } = response;\n            if (!body) {\n                throw new Error(\"Could not begin remote stream. Please check the given URL and try again.\");\n            }\n            const runnableStream = convertEventStreamToIterableReadableDataStream(body);\n            for await (const chunk of runnableStream) {\n                const deserializedChunk = deserialize(chunk);\n                yield deserializedChunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = deserializedChunk;\n                    }\n                    else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = concat(finalOutput, deserializedChunk);\n                        }\n                        catch {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        }\n        catch (err) {\n            await runManager?.handleChainError(err);\n            throw err;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n    async *streamLog(input, options, streamOptions) {\n        const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n        const callbackManager_ = await getCallbackManagerForConfig(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n        delete config.runId;\n        // The type is in camelCase but the API only accepts snake_case.\n        const camelCaseStreamOptions = {\n            include_names: streamOptions?.includeNames,\n            include_types: streamOptions?.includeTypes,\n            include_tags: streamOptions?.includeTags,\n            exclude_names: streamOptions?.excludeNames,\n            exclude_types: streamOptions?.excludeTypes,\n            exclude_tags: streamOptions?.excludeTags,\n        };\n        let runLog;\n        try {\n            const response = await this.post(\"/stream_log\", {\n                input,\n                config: removeCallbacks(config),\n                kwargs,\n                ...camelCaseStreamOptions,\n                diff: false,\n            });\n            const { body, ok } = response;\n            if (!ok) {\n                throw new Error(`${response.status} Error: ${await response.text()}`);\n            }\n            if (!body) {\n                throw new Error(\"Could not begin remote stream log. Please check the given URL and try again.\");\n            }\n            const runnableStream = convertEventStreamToIterableReadableDataStream(body);\n            for await (const log of runnableStream) {\n                const chunk = revive(JSON.parse(log));\n                const logPatch = new RunLogPatch({ ops: chunk.ops });\n                yield logPatch;\n                if (runLog === undefined) {\n                    runLog = RunLog.fromRunLogPatch(logPatch);\n                }\n                else {\n                    runLog = runLog.concat(logPatch);\n                }\n            }\n        }\n        catch (err) {\n            await runManager?.handleChainError(err);\n            throw err;\n        }\n        await runManager?.handleChainEnd(runLog?.state.final_output);\n    }\n    _streamEvents(input, options, streamOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const outerThis = this;\n        const generator = async function* () {\n            const [config, kwargs] = outerThis._separateRunnableConfigFromCallOptions(options);\n            const callbackManager_ = await getCallbackManagerForConfig(options);\n            const runManager = await callbackManager_?.handleChainStart(outerThis.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n            delete config.runId;\n            // The type is in camelCase but the API only accepts snake_case.\n            const camelCaseStreamOptions = {\n                include_names: streamOptions?.includeNames,\n                include_types: streamOptions?.includeTypes,\n                include_tags: streamOptions?.includeTags,\n                exclude_names: streamOptions?.excludeNames,\n                exclude_types: streamOptions?.excludeTypes,\n                exclude_tags: streamOptions?.excludeTags,\n            };\n            const events = [];\n            try {\n                const response = await outerThis.post(\"/stream_events\", {\n                    input,\n                    config: removeCallbacks(config),\n                    kwargs,\n                    ...camelCaseStreamOptions,\n                    diff: false,\n                });\n                const { body, ok } = response;\n                if (!ok) {\n                    throw new Error(`${response.status} Error: ${await response.text()}`);\n                }\n                if (!body) {\n                    throw new Error(\"Could not begin remote stream events. Please check the given URL and try again.\");\n                }\n                const runnableStream = convertEventStreamToIterableReadableDataStream(body);\n                for await (const log of runnableStream) {\n                    const chunk = revive(JSON.parse(log));\n                    const event = {\n                        event: chunk.event,\n                        name: chunk.name,\n                        run_id: chunk.run_id,\n                        tags: chunk.tags,\n                        metadata: chunk.metadata,\n                        data: chunk.data,\n                    };\n                    yield event;\n                    events.push(event);\n                }\n            }\n            catch (err) {\n                await runManager?.handleChainError(err);\n                throw err;\n            }\n            await runManager?.handleChainEnd(events);\n        };\n        return generator();\n    }\n    streamEvents(input, options, streamOptions) {\n        if (options.version !== \"v1\" && options.version !== \"v2\") {\n            throw new Error(`Only versions \"v1\" and \"v2\" of the events schema is currently supported.`);\n        }\n        if (options.encoding !== undefined) {\n            throw new Error(\"Special encodings are not supported for this runnable.\");\n        }\n        const eventStream = this._streamEvents(input, options, streamOptions);\n        return IterableReadableStream.fromAsyncGenerator(eventStream);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}