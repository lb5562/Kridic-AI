{"ast":null,"code":"import { Serializable } from \"../load/serializable.js\";\nexport function mergeContent(firstContent, secondContent) {\n  // If first content is a string\n  if (typeof firstContent === \"string\") {\n    if (typeof secondContent === \"string\") {\n      return firstContent + secondContent;\n    } else {\n      return [{\n        type: \"text\",\n        text: firstContent\n      }, ...secondContent];\n    }\n    // If both are arrays\n  } else if (Array.isArray(secondContent)) {\n    return [...firstContent, ...secondContent];\n    // If the first content is a list and second is a string\n  } else {\n    // Otherwise, add the second content as a new element of the list\n    return [...firstContent, {\n      type: \"text\",\n      text: secondContent\n    }];\n  }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nexport class BaseMessage extends Serializable {\n  get lc_aliases() {\n    // exclude snake case conversion to pascal case\n    return {\n      additional_kwargs: \"additional_kwargs\",\n      response_metadata: \"response_metadata\"\n    };\n  }\n  /**\n   * @deprecated\n   * Use {@link BaseMessage.content} instead.\n   */\n  get text() {\n    return typeof this.content === \"string\" ? this.content : \"\";\n  }\n  constructor(fields, /** @deprecated */\n  kwargs) {\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        content: fields,\n        additional_kwargs: kwargs,\n        response_metadata: {}\n      };\n    }\n    // Make sure the default value for additional_kwargs is passed into super() for serialization\n    if (!fields.additional_kwargs) {\n      // eslint-disable-next-line no-param-reassign\n      fields.additional_kwargs = {};\n    }\n    if (!fields.response_metadata) {\n      // eslint-disable-next-line no-param-reassign\n      fields.response_metadata = {};\n    }\n    super(fields);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"messages\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /** The content of the message. */\n    Object.defineProperty(this, \"content\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** The name of the message sender in a multi-user chat. */\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** Additional keyword arguments */\n    Object.defineProperty(this, \"additional_kwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** Response metadata. For example: response headers, logprobs, token counts. */\n    Object.defineProperty(this, \"response_metadata\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.name = fields.name;\n    this.content = fields.content;\n    this.additional_kwargs = fields.additional_kwargs;\n    this.response_metadata = fields.response_metadata;\n  }\n  toDict() {\n    return {\n      type: this._getType(),\n      data: this.toJSON().kwargs\n    };\n  }\n}\nexport function isOpenAIToolCallArray(value) {\n  return Array.isArray(value) && value.every(v => typeof v.index === \"number\");\n}\nexport function _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  const merged = {\n    ...left\n  };\n  for (const [key, value] of Object.entries(right)) {\n    if (merged[key] == null) {\n      merged[key] = value;\n    } else if (value == null) {\n      continue;\n    } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n      throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n    } else if (typeof merged[key] === \"string\") {\n      merged[key] = merged[key] + value;\n    } else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n      merged[key] = _mergeDicts(merged[key], value);\n    } else if (Array.isArray(merged[key])) {\n      merged[key] = _mergeLists(merged[key], value);\n    } else if (merged[key] === value) {\n      continue;\n    } else {\n      console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n    }\n  }\n  return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeLists(left, right) {\n  if (left === undefined && right === undefined) {\n    return undefined;\n  } else if (left === undefined || right === undefined) {\n    return left || right;\n  } else {\n    const merged = [...left];\n    for (const item of right) {\n      if (typeof item === \"object\" && \"index\" in item && typeof item.index === \"number\") {\n        const toMerge = merged.findIndex(leftItem => leftItem.index === item.index);\n        if (toMerge !== -1) {\n          merged[toMerge] = _mergeDicts(merged[toMerge], item);\n        } else {\n          merged.push(item);\n        }\n      } else {\n        merged.push(item);\n      }\n    }\n    return merged;\n  }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nexport class BaseMessageChunk extends BaseMessage {}\nexport function isBaseMessage(messageLike) {\n  return typeof messageLike?._getType === \"function\";\n}\nexport function isBaseMessageChunk(messageLike) {\n  return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}","map":{"version":3,"names":["Serializable","mergeContent","firstContent","secondContent","type","text","Array","isArray","BaseMessage","lc_aliases","additional_kwargs","response_metadata","content","constructor","fields","kwargs","Object","defineProperty","enumerable","configurable","writable","value","name","toDict","_getType","data","toJSON","isOpenAIToolCallArray","every","v","index","_mergeDicts","left","right","merged","key","entries","Error","_mergeLists","console","warn","undefined","item","toMerge","findIndex","leftItem","push","BaseMessageChunk","isBaseMessage","messageLike","isBaseMessageChunk","concat"],"sources":["C:/Users/lucil/Gen-AI-Contest/FrontEnd/kridic-front/node_modules/@langchain/core/dist/messages/base.js"],"sourcesContent":["import { Serializable } from \"../load/serializable.js\";\nexport function mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        }\n        else {\n            return [{ type: \"text\", text: firstContent }, ...secondContent];\n        }\n        // If both are arrays\n    }\n    else if (Array.isArray(secondContent)) {\n        return [...firstContent, ...secondContent];\n        // If the first content is a list and second is a string\n    }\n    else {\n        // Otherwise, add the second content as a new element of the list\n        return [...firstContent, { type: \"text\", text: secondContent }];\n    }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nexport class BaseMessage extends Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\",\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */\n    get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {},\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"messages\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */\n        Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */\n        Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts. */\n        Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON()\n                .kwargs,\n        };\n    }\n}\nexport function isOpenAIToolCallArray(value) {\n    return (Array.isArray(value) &&\n        value.every((v) => typeof v.index === \"number\"));\n}\nexport function _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    const merged = { ...left };\n    for (const [key, value] of Object.entries(right)) {\n        if (merged[key] == null) {\n            merged[key] = value;\n        }\n        else if (value == null) {\n            continue;\n        }\n        else if (typeof merged[key] !== typeof value ||\n            Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        }\n        else if (typeof merged[key] === \"string\") {\n            merged[key] = merged[key] + value;\n        }\n        else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n            merged[key] = _mergeDicts(merged[key], value);\n        }\n        else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        }\n        else if (merged[key] === value) {\n            continue;\n        }\n        else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    }\n    else if (left === undefined || right === undefined) {\n        return left || right;\n    }\n    else {\n        const merged = [...left];\n        for (const item of right) {\n            if (typeof item === \"object\" &&\n                \"index\" in item &&\n                typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem) => leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                }\n                else {\n                    merged.push(item);\n                }\n            }\n            else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nexport class BaseMessageChunk extends BaseMessage {\n}\nexport function isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nexport function isBaseMessageChunk(messageLike) {\n    return (isBaseMessage(messageLike) &&\n        typeof messageLike.concat === \"function\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}