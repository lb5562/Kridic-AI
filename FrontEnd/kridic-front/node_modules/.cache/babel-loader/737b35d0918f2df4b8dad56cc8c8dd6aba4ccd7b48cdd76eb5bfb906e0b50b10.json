{"ast":null,"code":"import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts } from \"./base.js\";\n/**\n * Represents a tool message in a conversation.\n */\nexport class ToolMessage extends BaseMessage {\n  static lc_name() {\n    return \"ToolMessage\";\n  }\n  get lc_aliases() {\n    // exclude snake case conversion to pascal case\n    return {\n      tool_call_id: \"tool_call_id\"\n    };\n  }\n  constructor(fields, tool_call_id, name) {\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n      fields = {\n        content: fields,\n        name,\n        tool_call_id: tool_call_id\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"tool_call_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.tool_call_id = fields.tool_call_id;\n  }\n  _getType() {\n    return \"tool\";\n  }\n  static isInstance(message) {\n    return message._getType() === \"tool\";\n  }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */\nexport class ToolMessageChunk extends BaseMessageChunk {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"tool_call_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.tool_call_id = fields.tool_call_id;\n  }\n  static lc_name() {\n    return \"ToolMessageChunk\";\n  }\n  _getType() {\n    return \"tool\";\n  }\n  concat(chunk) {\n    return new ToolMessageChunk({\n      content: mergeContent(this.content, chunk.content),\n      additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n      response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n      tool_call_id: this.tool_call_id\n    });\n  }\n}\nexport function defaultToolCallParser(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n  const toolCalls = [];\n  const invalidToolCalls = [];\n  for (const toolCall of rawToolCalls) {\n    if (!toolCall.function) {\n      continue;\n    } else {\n      const functionName = toolCall.function.name;\n      try {\n        const functionArgs = JSON.parse(toolCall.function.arguments);\n        const parsed = {\n          name: functionName || \"\",\n          args: functionArgs || {},\n          id: toolCall.id\n        };\n        toolCalls.push(parsed);\n      } catch (error) {\n        invalidToolCalls.push({\n          name: functionName,\n          args: toolCall.function.arguments,\n          id: toolCall.id,\n          error: \"Malformed args.\"\n        });\n      }\n    }\n  }\n  return [toolCalls, invalidToolCalls];\n}","map":{"version":3,"names":["BaseMessage","BaseMessageChunk","mergeContent","_mergeDicts","ToolMessage","lc_name","lc_aliases","tool_call_id","constructor","fields","name","content","Object","defineProperty","enumerable","configurable","writable","value","_getType","isInstance","message","ToolMessageChunk","concat","chunk","additional_kwargs","response_metadata","defaultToolCallParser","rawToolCalls","toolCalls","invalidToolCalls","toolCall","function","functionName","functionArgs","JSON","parse","arguments","parsed","args","id","push","error"],"sources":["C:/Users/lucil/Gen-AI-Contest/FrontEnd/kridic-front/node_modules/@langchain/core/dist/messages/tool.js"],"sourcesContent":["import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, } from \"./base.js\";\n/**\n * Represents a tool message in a conversation.\n */\nexport class ToolMessage extends BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return { tool_call_id: \"tool_call_id\" };\n    }\n    constructor(fields, tool_call_id, name) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, name, tool_call_id: tool_call_id };\n        }\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */\nexport class ToolMessageChunk extends BaseMessageChunk {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            tool_call_id: this.tool_call_id,\n        });\n    }\n}\nexport function defaultToolCallParser(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls) {\n        if (!toolCall.function) {\n            continue;\n        }\n        else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id,\n                };\n                toolCalls.push(parsed);\n            }\n            catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\",\n                });\n            }\n        }\n    }\n    return [toolCalls, invalidToolCalls];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}